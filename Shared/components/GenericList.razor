
@using System.Net.Http.Json
@using System.Linq.Expressions;
@using System.Reflection;
@using MudBlazor
@typeparam T
@inject ISnackbar Snackbar


<MudTable Items="@Items" Filter="@FilterFunc">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Generic Items</MudText>
        <MudSpacer />        
        <MudTextField Value="@searchString" ValueChanged="@((string newValue) => OnSearchStringChanged(newValue))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        @foreach (var prop in typeof(T).GetProperties())
        {   
                if (ShouldRenderProperty(prop))
                {
                    <MudTh><MudTableSortLabel SortBy="@CreateSortByLambda(prop.Name)">@prop.Name</MudTableSortLabel></MudTh>
                }
        }
    </HeaderContent>

    <RowTemplate>
        @foreach (var prop in typeof(T).GetProperties())
        {
            if (ShouldRenderProperty(prop))
            {
                <MudTd DataLabel="@prop.Name">@GetValueFromProperty(@context, prop.Name)</MudTd>
            }
        }
    </RowTemplate>

    <RowEditingTemplate>
        @foreach (var prop in typeof(T).GetProperties())
        {

        if (ShouldRenderProperty(prop))
        {
            <MudTd DataLabel="@prop.Name">
                <MudTd DataLabel="@prop.Name">@GetValueFromProperty(@context, prop.Name)</MudTd>
                @* <MudTextField @bind-Value="@($"{@context.GetType().GetProperty(prop.Name).GetValue(@context, null)}")" Required /> *@
             </MudTd>
        }
        }
        
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private T itemBeforeEdit;
    public IEnumerable<T> Items { get; set; }
    private string searchString = "";

    private void OnSearchStringChanged(string newValue)
    {
        searchString = newValue;
        UpdateFilter();
        // Add any additional logic if needed
        StateHasChanged();  // This may not be necessary, but if you're updating UI based on searchString, you might need it.
    }
   

    private void UpdateFilter()
    {

        StateHasChanged();
    }

    private object GetValueFromProperty(T item, string propertyName)
    {
        return item.GetType().GetProperty(propertyName)?.GetValue(item, null);
    }

    private bool ShouldRenderProperty(PropertyInfo prop)
    {
        var attr = prop.GetCustomAttribute<ShouldRenderAttribute>();
        return attr == null || attr.Render;
    }

    private Func<T, object> CreateSortByLambda(string propertyName)
    {
        var param = Expression.Parameter(typeof(T), "x");
        var property = Expression.PropertyOrField(param, propertyName);
        var conversion = Expression.Convert(property, typeof(object));
        return Expression.Lambda<Func<T, object>>(conversion, param).Compile();
    }

    protected override async Task OnInitializedAsync()
    {

        Items = new List<T>(); //await httpClient.GetFromJsonAsync<IEnumerable<T>>("webapi/generic-endpoint");
        if(typeof(T).Name == typeof(mbroker).Name)
        {
            List<mbroker> mbrokers = new List<mbroker>();
            mbrokers.Add(new mbroker() { BrokerName = "Cerbo Broker", url  = "192.168.0.200", port = 1883});
            mbrokers.Add(new mbroker() { BrokerName = "home assistant Broker", url = "192.168.0.128", port = 1883 });
            mbrokers.Add(new mbroker() { BrokerName = "docker brocker", url = "192.168.1.10", port = 1883 });
            
            Items = mbrokers as IEnumerable<T>;
        }
        if (typeof(T).Name == typeof(Person).Name)
        {

            List<Person>peoples = new List<Person>();
            peoples.Add(new Person() { FirstName = "John", LastName = "smith" ,Age = 20 });
            peoples.Add(new Person() { FirstName = "Mary", LastName = "smith" , Age = 30 });
            peoples.Add(new Person() { FirstName = "Bob", LastName = "smith", Age = 40 });

            Items = peoples as IEnumerable<T>;
        }
        
    }

    private void BackupItem(T item)
    {
        // Here you'd typically deep copy the item. For this simple example, I'm just setting the reference.
        itemBeforeEdit = item;
    }

    private void ResetItemToOriginalValues(T item)
    {
        // You'd restore the properties from itemBeforeEdit to the provided item.
        // This might require a deep copy mechanism if your items are complex objects.
    }

    private bool FilterFunc(T item)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        // This is a very basic filtering mechanism which checks if any property's value contains the search string.
        return typeof(T).GetProperties().Any(prop => prop.GetValue(item, null)?.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) == true);
    }
} 
 